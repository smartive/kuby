name: Release Binary

on:
  push:
    branches:
      - master
      - feat/rework #test.

jobs:
  get_next_version:
    runs-on: ubuntu-latest
    name: Fetch next version number
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: semantic release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          dry_run: true
          branches: |
            ['feat/rework']
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: export new version number
        run: echo "BUILD_VERSION=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_ENV

  build_windows:
    needs: get_next_version
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            openssl_target: openssl:x64-windows-static-md
    name: Build ${{ matrix.target }} on windows
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set new version number (${{ env.BUILD_VERSION }})
        run: (get-content -Path .\Cargo.toml) | %{$_ -replace "^version = .*","version = \"${{ env.BUILD_VERSION }}\""} | set-content -Path .\Cargo.toml

      - name: install and setup vcpkg
        uses: lukka/run-vcpkg@v10.1
        with:
          vcpkgGitCommitId: b196dacc2f63f37bb75504c36c349042336749cb

      - name: setup openssl
        run: vcpkg install ${{ matrix.openssl_target }}

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/kuby.exe

  build_unix:
    needs: get_next_version
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    name: Build ${{ matrix.target }} on ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set new version number (${{ env.BUILD_VERSION }})
        run: sed -i -e 's/^version = .*/version = "${{ env.BUILD_VERSION }}"/' Cargo.toml

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/kuby

  build_macos:
    needs: get_next_version
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
          # - target: x86_64-apple-darwin
    name: Build ${{ matrix.target }} on macos
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set new version number (${{ env.BUILD_VERSION }})
        run: sed -i -e 's/^version = .*/version = "${{ env.BUILD_VERSION }}"/' Cargo.toml

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target ${{ matrix.target }}

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/kuby

  create_release:
    needs:
      - build_windows
      - build_unix
      - build_macos
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
